/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, RewardPoints as PrismaRewardPoints } from "@prisma/client";

export class RewardPointsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.RewardPointsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.rewardPoints.count(args);
  }

  async rewardPointsItems<T extends Prisma.RewardPointsFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.RewardPointsFindManyArgs>
  ): Promise<PrismaRewardPoints[]> {
    return this.prisma.rewardPoints.findMany<Prisma.RewardPointsFindManyArgs>(
      args
    );
  }
  async rewardPoints<T extends Prisma.RewardPointsFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.RewardPointsFindUniqueArgs>
  ): Promise<PrismaRewardPoints | null> {
    return this.prisma.rewardPoints.findUnique(args);
  }
  async createRewardPoints<T extends Prisma.RewardPointsCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.RewardPointsCreateArgs>
  ): Promise<PrismaRewardPoints> {
    return this.prisma.rewardPoints.create<T>(args);
  }
  async updateRewardPoints<T extends Prisma.RewardPointsUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.RewardPointsUpdateArgs>
  ): Promise<PrismaRewardPoints> {
    return this.prisma.rewardPoints.update<T>(args);
  }
  async deleteRewardPoints<T extends Prisma.RewardPointsDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.RewardPointsDeleteArgs>
  ): Promise<PrismaRewardPoints> {
    return this.prisma.rewardPoints.delete(args);
  }
}
