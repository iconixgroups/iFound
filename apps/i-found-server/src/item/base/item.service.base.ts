/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Item as PrismaItem } from "@prisma/client";

export class ItemServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ItemCountArgs, "select">): Promise<number> {
    return this.prisma.item.count(args);
  }

  async items<T extends Prisma.ItemFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ItemFindManyArgs>
  ): Promise<PrismaItem[]> {
    return this.prisma.item.findMany<Prisma.ItemFindManyArgs>(args);
  }
  async item<T extends Prisma.ItemFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ItemFindUniqueArgs>
  ): Promise<PrismaItem | null> {
    return this.prisma.item.findUnique(args);
  }
  async createItem<T extends Prisma.ItemCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ItemCreateArgs>
  ): Promise<PrismaItem> {
    return this.prisma.item.create<T>(args);
  }
  async updateItem<T extends Prisma.ItemUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ItemUpdateArgs>
  ): Promise<PrismaItem> {
    return this.prisma.item.update<T>(args);
  }
  async deleteItem<T extends Prisma.ItemDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ItemDeleteArgs>
  ): Promise<PrismaItem> {
    return this.prisma.item.delete(args);
  }
}
