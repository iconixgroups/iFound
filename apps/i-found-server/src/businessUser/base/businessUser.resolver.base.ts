/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { BusinessUser } from "./BusinessUser";
import { BusinessUserCountArgs } from "./BusinessUserCountArgs";
import { BusinessUserFindManyArgs } from "./BusinessUserFindManyArgs";
import { BusinessUserFindUniqueArgs } from "./BusinessUserFindUniqueArgs";
import { CreateBusinessUserArgs } from "./CreateBusinessUserArgs";
import { UpdateBusinessUserArgs } from "./UpdateBusinessUserArgs";
import { DeleteBusinessUserArgs } from "./DeleteBusinessUserArgs";
import { BusinessUserService } from "../businessUser.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => BusinessUser)
export class BusinessUserResolverBase {
  constructor(
    protected readonly service: BusinessUserService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "BusinessUser",
    action: "read",
    possession: "any",
  })
  async _businessUsersMeta(
    @graphql.Args() args: BusinessUserCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [BusinessUser])
  @nestAccessControl.UseRoles({
    resource: "BusinessUser",
    action: "read",
    possession: "any",
  })
  async businessUsers(
    @graphql.Args() args: BusinessUserFindManyArgs
  ): Promise<BusinessUser[]> {
    return this.service.businessUsers(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => BusinessUser, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "BusinessUser",
    action: "read",
    possession: "own",
  })
  async businessUser(
    @graphql.Args() args: BusinessUserFindUniqueArgs
  ): Promise<BusinessUser | null> {
    const result = await this.service.businessUser(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => BusinessUser)
  @nestAccessControl.UseRoles({
    resource: "BusinessUser",
    action: "create",
    possession: "any",
  })
  async createBusinessUser(
    @graphql.Args() args: CreateBusinessUserArgs
  ): Promise<BusinessUser> {
    return await this.service.createBusinessUser({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => BusinessUser)
  @nestAccessControl.UseRoles({
    resource: "BusinessUser",
    action: "update",
    possession: "any",
  })
  async updateBusinessUser(
    @graphql.Args() args: UpdateBusinessUserArgs
  ): Promise<BusinessUser | null> {
    try {
      return await this.service.updateBusinessUser({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => BusinessUser)
  @nestAccessControl.UseRoles({
    resource: "BusinessUser",
    action: "delete",
    possession: "any",
  })
  async deleteBusinessUser(
    @graphql.Args() args: DeleteBusinessUserArgs
  ): Promise<BusinessUser | null> {
    try {
      return await this.service.deleteBusinessUser(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
