/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, CustomerUser as PrismaCustomerUser } from "@prisma/client";

export class CustomerUserServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CustomerUserCountArgs, "select">
  ): Promise<number> {
    return this.prisma.customerUser.count(args);
  }

  async customerUsers<T extends Prisma.CustomerUserFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.CustomerUserFindManyArgs>
  ): Promise<PrismaCustomerUser[]> {
    return this.prisma.customerUser.findMany<Prisma.CustomerUserFindManyArgs>(
      args
    );
  }
  async customerUser<T extends Prisma.CustomerUserFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.CustomerUserFindUniqueArgs>
  ): Promise<PrismaCustomerUser | null> {
    return this.prisma.customerUser.findUnique(args);
  }
  async createCustomerUser<T extends Prisma.CustomerUserCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CustomerUserCreateArgs>
  ): Promise<PrismaCustomerUser> {
    return this.prisma.customerUser.create<T>(args);
  }
  async updateCustomerUser<T extends Prisma.CustomerUserUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CustomerUserUpdateArgs>
  ): Promise<PrismaCustomerUser> {
    return this.prisma.customerUser.update<T>(args);
  }
  async deleteCustomerUser<T extends Prisma.CustomerUserDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.CustomerUserDeleteArgs>
  ): Promise<PrismaCustomerUser> {
    return this.prisma.customerUser.delete(args);
  }
}
